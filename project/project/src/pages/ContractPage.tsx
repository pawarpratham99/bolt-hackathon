import React, { useState } from 'react';
import { Shield, FileText, Download } from 'lucide-react';

interface ContractTemplate {
  id: string;
  name: string;
  description: string;
  fields: { label: string; type: string; required: boolean }[];
}

const ContractPage = () => {
  const [selectedTemplate, setSelectedTemplate] = useState<string>('');
  const [formData, setFormData] = useState<Record<string, string>>({});
  const [generatedContract, setGeneratedContract] = useState<string>('');
  const [showContract, setShowContract] = useState(false);

  const contractTemplates: ContractTemplate[] = [
    {
      id: 'nda',
      name: 'Non-Disclosure Agreement (NDA)',
      description: 'Protect confidential information between parties',
      fields: [
        { label: 'Disclosing Party Name', type: 'text', required: true },
        { label: 'Receiving Party Name', type: 'text', required: true },
        { label: 'Purpose of Disclosure', type: 'textarea', required: true },
        { label: 'Agreement Duration (months)', type: 'number', required: true },
      ],
    },
    {
      id: 'freelance',
      name: 'Freelance Agreement',
      description: 'Define terms for freelance work and payment',
      fields: [
        { label: 'Client Name', type: 'text', required: true },
        { label: 'Freelancer Name', type: 'text', required: true },
        { label: 'Project Description', type: 'textarea', required: true },
        { label: 'Payment Amount', type: 'number', required: true },
        { label: 'Deadline', type: 'date', required: true },
      ],
    },
    {
      id: 'rental',
      name: 'Rental Agreement',
      description: 'Residential or commercial property rental terms',
      fields: [
        { label: 'Landlord Name', type: 'text', required: true },
        { label: 'Tenant Name', type: 'text', required: true },
        { label: 'Property Address', type: 'textarea', required: true },
        { label: 'Monthly Rent', type: 'number', required: true },
        { label: 'Lease Duration (months)', type: 'number', required: true },
      ],
    },
    {
      id: 'breakup',
      name: 'Breakup Contract',
      description: 'Amicable separation terms and asset division',
      fields: [
        { label: 'Party 1 Name', type: 'text', required: true },
        { label: 'Party 2 Name', type: 'text', required: true },
        { label: 'Relationship Duration', type: 'text', required: true },
        { label: 'Shared Assets', type: 'textarea', required: false },
      ],
    },
    {
      id: 'cofounder',
      name: 'Co-founder Agreement',
      description: 'Define roles, equity, and responsibilities',
      fields: [
        { label: 'Company Name', type: 'text', required: true },
        { label: 'Co-founder 1 Name', type: 'text', required: true },
        { label: 'Co-founder 2 Name', type: 'text', required: true },
        { label: 'Equity Split (%)', type: 'text', required: true },
        { label: 'Vesting Period (years)', type: 'number', required: true },
      ],
    },
    {
      id: 'roommate',
      name: 'Roommate Agreement',
      description: 'Living arrangements and household rules',
      fields: [
        { label: 'Roommate 1 Name', type: 'text', required: true },
        { label: 'Roommate 2 Name', type: 'text', required: true },
        { label: 'Property Address', type: 'textarea', required: true },
        { label: 'Monthly Rent Split', type: 'text', required: true },
        { label: 'House Rules', type: 'textarea', required: false },
      ],
    },
  ];

  const handleTemplateChange = (templateId: string) => {
    setSelectedTemplate(templateId);
    setFormData({});
    setShowContract(false);
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const generateContract = () => {
    const template = contractTemplates.find(t => t.id === selectedTemplate);
    if (!template) return;

    // Simple contract generation (in real app, this would use AI)
    const contractText = `
${template.name.toUpperCase()}

This ${template.name} is entered into on ${new Date().toLocaleDateString()} between the following parties:

${template.fields.map(field => `${field.label}: ${formData[field.label] || '[TO BE FILLED]'}`).join('\n')}

Terms and Conditions:
- This agreement is legally binding upon both parties
- Any disputes will be resolved through mediation
- This agreement is governed by applicable local laws

Signatures:
_____________________    Date: ___________
Party 1

_____________________    Date: ___________
Party 2

Generated by AI Legal Buddy - ${new Date().toLocaleString()}
    `.trim();

    setGeneratedContract(contractText);
    setShowContract(true);
  };

  const handleBlockchainVerification = () => {
    // Simulate Algorand blockchain verification
    alert('Contract hash stored on Algorand blockchain! (Feature coming soon)\n\nTransaction ID: ALGO_' + Math.random().toString(36).substr(2, 9).toUpperCase());
  };

  const selectedTemplateData = contractTemplates.find(t => t.id === selectedTemplate);

  return (
    <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Generate Contracts</h1>
        <p className="text-gray-600">Create professional legal contracts in minutes</p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Template Selection */}
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Select Contract Template
            </label>
            <select
              value={selectedTemplate}
              onChange={(e) => handleTemplateChange(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Choose a template...</option>
              {contractTemplates.map((template) => (
                <option key={template.id} value={template.id}>
                  {template.name}
                </option>
              ))}
            </select>
            {selectedTemplateData && (
              <p className="mt-2 text-sm text-gray-600">
                {selectedTemplateData.description}
              </p>
            )}
          </div>

          {/* Form Fields */}
          {selectedTemplateData && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Contract Details</h3>
              {selectedTemplateData.fields.map((field) => (
                <div key={field.label}>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    {field.label} {field.required && <span className="text-red-500">*</span>}
                  </label>
                  {field.type === 'textarea' ? (
                    <textarea
                      value={formData[field.label] || ''}
                      onChange={(e) => handleInputChange(field.label, e.target.value)}
                      rows={3}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  ) : (
                    <input
                      type={field.type}
                      value={formData[field.label] || ''}
                      onChange={(e) => handleInputChange(field.label, e.target.value)}
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  )}
                </div>
              ))}
              
              <button
                onClick={generateContract}
                className="w-full bg-blue-600 text-white py-3 px-4 rounded-md hover:bg-blue-700 transition-colors duration-200 flex items-center justify-center space-x-2"
              >
                <FileText className="h-5 w-5" />
                <span>Generate Contract</span>
              </button>
            </div>
          )}
        </div>

        {/* Generated Contract */}
        <div>
          {showContract && (
            <div className="bg-white border border-gray-200 rounded-lg p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Generated Contract</h3>
              <div className="bg-gray-50 p-4 rounded-md mb-4 max-h-96 overflow-y-auto">
                <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono">
                  {generatedContract}
                </pre>
              </div>
              
              <div className="flex flex-col sm:flex-row gap-3">
                <button
                  onClick={handleBlockchainVerification}
                  className="flex-1 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors duration-200 flex items-center justify-center space-x-2"
                >
                  <Shield className="h-4 w-4" />
                  <span>Sign & Verify on Blockchain</span>
                </button>
                
                <button
                  onClick={() => {
                    const blob = new Blob([generatedContract], { type: 'text/plain' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `${selectedTemplateData?.name || 'contract'}.txt`;
                    a.click();
                  }}
                  className="flex-1 bg-gray-600 text-white py-2 px-4 rounded-md hover:bg-gray-700 transition-colors duration-200 flex items-center justify-center space-x-2"
                >
                  <Download className="h-4 w-4" />
                  <span>Download</span>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ContractPage;